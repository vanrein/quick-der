

class QuickDER2c(QuickDERgeneric):
    to_be_defined: Any = ...
    to_be_overlaid: Any = ...
    cursor_offset: Any = ...
    nested_typerefs: Any = ...
    nested_typecuts: Any = ...
    semamod: Any = ...
    refmods: Any = ...
    overlay_funmap: Any = ...
    pack_funmap: Any = ...
    psub_funmap: Any = ...
    issued_typedefs: Any = ...
    def __init__(self, semamod, outfn, refmods) -> None: ...
    def generate_head(self): ...
    def generate_tail(self): ...
    def generate_overlay(self): ...
    def generate_pack(self): ...
    def generate_psub(self): ...
    def generate_psub_sub(self, node, subquads, tp, fld): ...
    def generate_overlay_node(self, node, tp, fld): ...
    def generate_pack_node(self, node, **kwargs): ...
    def generate_psub_node(self, node, tp, fld, prim): ...
    def overlayValueAssignment(self, node, tp, fld): ...
    def packValueAssignment(self, node): ...
    def psubValueAssignment(self, node, tp, fld, prim): ...
    def overlayTypeAssignment(self, node, tp, fld): ...
    def packTypeAssignment(self, node, implicit: bool = ...): ...
    def psubTypeAssignment(self, node, tp, fld, prim): ...
    def overlayDefinedType(self, node, tp, fld): ...
    def packDefinedType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    unit: Any = ...
    def psubDefinedType(self, node, tp, fld, prim): ...
    def overlaySimpleType(self, node, tp, fld): ...
    def packSimpleType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def psubSimpleType(self, node, tp, fld, prim): ...
    def overlayTaggedType(self, node, tp, fld): ...
    def packTaggedType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def packTaggedType_TODO(self, node, implicit: bool = ...): ...
    def psubTaggedType(self, node, tp, fld, prim): ...
    def overlayConstructedType(self, node, tp, fld, naked: bool = ...): ...
    def psubConstructedType(self, node, tp, fld, prim): ...
    def packSequenceType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packSetType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packChoiceType(self, node, implicit: bool = ..., outer_tag: Optional[Any] = ...): ...
    def overlayRepeatingStructureType(self, node, tp, fld): ...
    def psubRepeatingStructureType(self, node, tp, fld, prim): ...
    def packSequenceOfType(self, node, implicit: bool = ..., outer_tag: str = ...): ...
    def packSetOfType(self, node, implicit: bool = ..., outer_tag: str = ...): ...

